#! /usr/bin/env monkeyrunner
# Linux
#! /usr/local/bin/shebang monkeyrunner -plugin $AVC_HOME/bin/androidviewclient-$AVC_VERSION.jar @!
# Mac OS X
#! /usr/bin/env shebang monkeyrunner -plugin $ANDROID_VIEW_CLIENT_HOME/bin/androidviewclient-$ANDROID_VIEW_CLIENT_VERSION.jar @!
# -*- coding: utf-8 -*-
'''
Copyright (C) 2013  Diego Torres Milano
Created on Mar 28, 2013

Culebra helps you create AndroidViewClient scripts generating a working template that can be
modified to suit more specific needs.
                      __    __    __    __
                     /  \  /  \  /  \  /  \ 
____________________/  __\/  __\/  __\/  __\_____________________________
___________________/  /__/  /__/  /__/  /________________________________
                   | / \   / \   / \   / \   \___
                   |/   \_/   \_/   \_/   \    o \ 
                                           \_____/--<
@author: Diego Torres Milano
@author: Jennifer E. Swofford (ascii art snake)
'''

__version__ = '0.9.8'

import re
import sys
import os
import getopt
import warnings
from datetime import date

# This must be imported before MonkeyRunner and MonkeyDevice,
# otherwise the import fails.
# PyDev sets PYTHONPATH, use it
try:
    for p in os.environ['PYTHONPATH'].split(':'):
        if not p in sys.path:
            sys.path.append(p)
except:
    pass
    
try:
    sys.path.append(os.path.join(os.environ['ANDROID_VIEW_CLIENT_HOME'], 'src'))
except:
    pass

from com.dtmilano.android.viewclient import ViewClient

from com.android.monkeyrunner import MonkeyRunner, MonkeyDevice

HELP = 'help'
VERBOSE = 'verbose'
IGNORE_SECURE_DEVICE = 'ignore-secure-device'
FORCE_VIEW_SERVER_USE = 'force-view-server-use'
DO_NOT_START_VIEW_SERVER = 'do-not-start-view-server'
FIND_VIEWS_BY_ID = 'find-views-by-id'
FIND_VIEWS_WITH_TEXT = 'find-views-with-text'
FIND_VIEWS_WITH_CONTENT_DESCRIPTION = 'find-views-with-content-description'
USE_REGEXPS = 'use-regexps'
VERBOSE_COMMENTS = 'verbose-comments'
UNIT_TEST = 'unit-test'
USE_JAR = 'use-jar'
USE_DICTIONARY = 'use-dictionary'
AUTO_REGEXPS = 'auto-regexps'
OUTPUT = 'output'
WINDOW = 'window'

USAGE = 'usage: %s [OPTION]... [serialno]'
# -u,-s,-p,-v eaten by monkeyrunner
SHORT_OPTS = 'HVIFSw:i:t:d:rCUj:D:R:o:'
LONG_OPTS = [HELP, VERBOSE, IGNORE_SECURE_DEVICE, FORCE_VIEW_SERVER_USE, DO_NOT_START_VIEW_SERVER,
              WINDOW + '=',
              FIND_VIEWS_BY_ID + '=', FIND_VIEWS_WITH_TEXT + '=', FIND_VIEWS_WITH_CONTENT_DESCRIPTION + '=',
              USE_REGEXPS, VERBOSE_COMMENTS, UNIT_TEST,
              USE_JAR + '=', USE_DICTIONARY + '=', AUTO_REGEXPS + '=',
              OUTPUT + '=']
LONG_OPTS_ARG = {WINDOW: 'WINDOW', FIND_VIEWS_BY_ID: 'BOOL', FIND_VIEWS_WITH_TEXT: 'BOOL', FIND_VIEWS_WITH_CONTENT_DESCRIPTION: 'BOOL',
                  USE_JAR: 'BOOL', USE_DICTIONARY: 'BOOL', AUTO_REGEXPS: 'LIST',
                  OUTPUT: 'STR'}
OPTS_HELP = {
    'H': 'prints this help',
    'w': 'use WINDOW content (defualt: -1, all windows)',
    'i': 'whether to use findViewById() in script',
    't': 'whether to use findViewWithText() in script',
    'd': 'whether to use findViewWithContentDescription',
    'r': 'use regexps in matches',
    'U': 'generates unit test script',
    'j': 'use jar and appropriate shebang to run script',
    'D': 'use a dictionary to store the Views found',
    'R': 'auto regexps (i.e. clock)',
    'o': 'output filename',
    }

ID_RE = re.compile('id/([^/]*)(/(\d+))?')
AUTO_REGEXPS_RES = {'clock': re.compile('[012]\d:[0-5]\d')}
SHEBANG = {
    'no-jar': '#! /usr/bin/env monkeyrunner',
    'jar': '#! /usr/bin/env shebang monkeyrunner -plugin $ANDROID_VIEW_CLIENT_HOME/bin/androidviewclient-$ANDROID_VIEW_CLIENT_VERSION.jar @!',
    'jar-linux': '#! /usr/local/bin/shebang monkeyrunner -plugin $AVC_HOME/bin/androidviewclient-$AVC_VERSION.jar @!'
    }

def shortAndLongOptions():
    '''
    @return: the list of corresponding (short-option, long-option) tuples
    '''

    short_opts = SHORT_OPTS.replace(':', '')
    if len(short_opts) != len(LONG_OPTS):
        raise Exception('There is a mismatch between short and long options')
    t = tuple(short_opts) + tuple(LONG_OPTS)
    l2 = len(t)/2
    sl = []
    for i in range(l2):
        sl.append((t[i], t[i+l2]))
    return sl

def usage(exitVal=1):
    print >> sys.stderr, USAGE % progname
    print >> sys.stderr, "Try '%s --help' for more information." % progname
    sys.exit(exitVal)

def help():
    print >> sys.stderr, USAGE % progname
    print >> sys.stderr
    print >> sys.stderr, "Options:"
    for so, lo in shortAndLongOptions():
        o = '  -%c, --%s' % (so, lo)
        if lo[-1] == '=':
            o += LONG_OPTS_ARG[lo[:-1]]
        try:
            o = '%-34s %-45s' % (o, OPTS_HELP[so])
        except:
            pass
        print >> sys.stderr, o
    sys.exit(0)

def error(msg, fatal=False):
    print >>sys.stderr, "%s: ERROR: %s" % (progname, msg)
    if fatal:
        sys.exit(1)
    
def printVerboseComments(view):
    '''
    Prints the verbose comments for view.
    '''

    print '\n# class=%s' % view.getClass(),
    try:
        text = view.getText()
        if text:
            print 'text="%s"' % text,
    except:
        pass
    try:
        tag = view.getTag()
        if tab != 'null':
            print 'tag=%s' % tag
    except:
        pass
    print

def variableNameFromId(id):
    '''
    Returns a suitable variable name from the id.
    
    @type id: str
    @param id: the I{id}
    @return: the variable name from the id
    '''
    
    m = ID_RE.match(id)
    if m:
        var = m.group(1)
        if m.group(3):
            var += m.group(3)
        if re.match('^\d', var):
            var = 'id_' + var
        if options[USE_DICTIONARY]:
            return 'views[\'%s\']' % var
        else:
            return var
    else:
        raise Exception('Not an id: %s' % id)

def printFindViewWithText(view, useregexp):
    '''
    Prints the corresponding statement.
    
    @type view: L{View}
    @param view: the View
    '''
    
    id = view.getUniqueId()
    text = view.getText()
    if text:
        var = variableNameFromId(id)
        if text.find("\n") > 0:
            # 2 quotes + 1 quote = 3 quotes
            text = "''%s''" % text
        if useregexp:
            text = "re.compile('%s')" % text
        else:
            text = "'%s'" % text
        print '%s = vc.findViewWithTextOrRaise(%s)' % (var, text)
    elif kwargs1[VERBOSE]:
        warnings.warn('View with id=%s has no text' % id)

def printFindViewWithContentDescription(view, useregexp):
    '''
    Prints the corresponding statement.
    
    @type view: L{View}
    @param view: the View
    '''
    
    id = view.getUniqueId()
    contentDescription = view.getContentDescription()
    if contentDescription:
        var = variableNameFromId(id)
        if useregexp:
            if options[AUTO_REGEXPS]:
                for r in options[AUTO_REGEXPS]:
                    autoRegexp = AUTO_REGEXPS_RES[r]
                    if autoRegexp.match(contentDescription):
                        contentDescription = autoRegexp.pattern
                        break
            contentDescription = "re.compile('%s')" % contentDescription
        else:
            contentDescription = "'%s'" % contentDescription
        print '%s = vc.findViewWithContentDescriptionOrRaise(%s)' % (var, contentDescription)
    elif kwargs1[VERBOSE]:
        warnings.warn('View with id=%s has no content-description' % id)
        
def printFindViewById(view):
    '''
    Prints the corresponding statement.
    
    @type view: L{View}
    @param view: the View
    '''
    
    id = view.getUniqueId()
    var = variableNameFromId(id)
    print '%s = vc.findViewByIdOrRaise("%s")' % (var, id)
    
def traverseAndPrint(view):
    '''
    Traverses the View tree and prints the corresponding statement.
    
    @type view: L{View}
    @param view: the View
    '''
    
    if options[VERBOSE_COMMENTS]:
        printVerboseComments(view)
    if options[FIND_VIEWS_BY_ID]:
        printFindViewById(view)
    if options[FIND_VIEWS_WITH_TEXT]:
        printFindViewWithText(view, options[USE_REGEXPS])
    if options[FIND_VIEWS_WITH_CONTENT_DESCRIPTION]:
        printFindViewWithContentDescription(view, options[USE_REGEXPS])

def str2bool(v):
  return v.lower() in ("yes", "true", "t", "1", "on")

def getShebangJar():
    if options[USE_JAR]:
        import java
        osName = java.lang.System.getProperty('os.name')
        if osName == 'Linux':
            return SHEBANG['jar-linux']
        else:
            return SHABANG['jar']
    else:
        return SHEBANG['no-jar']

# __main__
progname = os.path.basename(sys.argv[0])
try:
    optlist, args = getopt.getopt(sys.argv[1:], SHORT_OPTS, LONG_OPTS)
    sys.argv[1:] = args
except getopt.GetoptError, e:
    print >>sys.stderr, 'ERROR:', str(e)
    usage()

kwargs1 = {VERBOSE: False, 'ignoresecuredevice': False}
kwargs2 = {'forceviewserveruse': False, 'startviewserver': True, 'autodump': False}
options = {FIND_VIEWS_BY_ID: True, FIND_VIEWS_WITH_TEXT: False, FIND_VIEWS_WITH_CONTENT_DESCRIPTION: False,
        USE_REGEXPS: False, VERBOSE_COMMENTS: False,
        UNIT_TEST: False, USE_JAR: True, USE_DICTIONARY: False, AUTO_REGEXPS: None, OUTPUT: None,
        WINDOW: -1}
transform = traverseAndPrint
for o, a in optlist:
    o = o.strip('-')
    if o in ['H', HELP]:
        help()
    elif o in ['V', VERBOSE]:
        kwargs1[VERBOSE] = True
    elif o in ['I', IGNORE_SECURE_DEVICE]:
        kwargs1['ignoresecuredevice'] = True
    elif o in ['F', FORCE_VIEW_SERVER_USE]:
        kwargs2['forceviewserveruse'] = True
    elif o in ['S', DO_NOT_START_VIEW_SERVER]:
        kwargs2['startviewserver'] = False
    elif o in ['w', WINDOW]:
         options[WINDOW] = a
    elif o in ['i', FIND_VIEWS_BY_ID]:
        options[FIND_VIEWS_BY_ID] = str2bool(a)
    elif o in ['t', FIND_VIEWS_WITH_TEXT]:
        options[FIND_VIEWS_WITH_TEXT] = str2bool(a)
    elif o in ['d', FIND_VIEWS_WITH_CONTENT_DESCRIPTION]:
        options[FIND_VIEWS_WITH_CONTENT_DESCRIPTION] = str2bool(a)
    elif o in ['r', USE_REGEXPS]:
        options[USE_REGEXPS] = True
    elif o in ['C', VERBOSE_COMMENTS]:
        options[VERBOSE_COMMENTS] = True
    elif o in ['U', UNIT_TEST]:
        warnings.warn('Not implemented yet: %s' % o)
        options[UNIT_TEST] = True
    elif o in ['j', USE_JAR]:
        options[USE_JAR] = str2bool(a)
    elif o in ['D', USE_DICTIONARY]:
        options[USE_DICTIONARY] = str2bool(a)
    elif o in ['R', AUTO_REGEXPS]:
        options[AUTO_REGEXPS] = a.split(',')
        for r in options[AUTO_REGEXPS]:
            if r not in AUTO_REGEXPS_RES:
                error("invalid auto regexp: %s\n" % (r))
                usage()
    elif o in ['o', OUTPUT]:
        options[OUTPUT] = a

if not (options[FIND_VIEWS_BY_ID] or options[FIND_VIEWS_WITH_TEXT]):
    if not options[VERBOSE_COMMENTS]:
        warnings.warn('All printing options disabled. Output will be empty.')
    else:
        warnings.warn('Only verbose comments will be printed')

device, serialno = ViewClient.connectToDeviceOrExit(**kwargs1)
vc = ViewClient(device, serialno, **kwargs2)
if options[OUTPUT]:
    sys.stdout = open(options[OUTPUT], 'w')
    import stat
    st = os.stat(options[OUTPUT])
    os.chmod(options[OUTPUT], st.st_mode | stat.S_IEXEC)

print '''%s
# -*- coding: utf-8 -*-
\'\'\'
Copyright (C) 2013  Diego Torres Milano
Created on %s by Culebra v%s

                      __    __    __    __
                     /  \  /  \  /  \  /  \ 
____________________/  __\/  __\/  __\/  __\_____________________________
___________________/  /__/  /__/  /__/  /________________________________
                   | / \   / \   / \   / \   \___
                   |/   \_/   \_/   \_/   \    o \ 
                                           \_____/--<
@author: Diego Torres Milano
@author: Jennifer E. Swofford (ascii art snake)
\'\'\'


import re
import sys
import os
''' % (getShebangJar(), date.today(), __version__)

if not options[USE_JAR]:
    print '''
# This must be imported before MonkeyRunner and MonkeyDevice,
# otherwise the import fails.
# PyDev sets PYTHONPATH, use it
try:
    for p in os.environ['PYTHONPATH'].split(':'):
        if not p in sys.path:
            sys.path.append(p)
except:
    pass
    
try:
    sys.path.append(os.path.join(os.environ['ANDROID_VIEW_CLIENT_HOME'], 'src'))
except:
    pass
'''

print '''
from com.dtmilano.android.viewclient import ViewClient

from com.android.monkeyrunner import MonkeyRunner, MonkeyDevice
  
device, serialno = ViewClient.connectToDeviceOrExit()
vc = ViewClient(device, serialno, autodump=False)
vc.dump(window=%s)
''' % (options[WINDOW] if type(options[WINDOW]).__name__ == 'str' and options[WINDOW][0] in '-0123456789' else "'%s'" % options[WINDOW])

if options[USE_DICTIONARY]:
    print '''views = dict()'''

vc.dump(window=options[WINDOW])
vc.traverse(transform=transform)
